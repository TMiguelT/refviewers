{"version":3,"sources":["App.js","theme.js","index.js"],"names":["Copyright","Typography","variant","color","align","Link","href","Date","getFullYear","file","a","text","contents","example","Cite","format","Author","name","this","fullName","authorships","firstAuthorships","lastAuthorships","renderWorkList","value","map","work","URL","sanitizeHtml","title","allowedTags","allowedAttributes","workDisplayName","sortByLength","order","b","data","length","renderCount","toString","App","useState","setFile","error","setError","authors","useMemo","citations","Map","Array","isArray","author","forEach","i","authorObj","authorLookup","names","given","push","trim","split","family","join","authorId","has","get","set","from","values","getAuthors","Container","maxWidth","AppBar","position","Toolbar","Box","flexGrow","Button","my","Grid","container","spacing","alignItems","direction","item","component","gutterBottom","type","style","display","onChange","event","fileType","currentTarget","files","parseFile","then","parsed","catch","e","columns","label","options","sort","customBodyRenderLite","dataIndex","rowIndex","encodeURI","customBodyRender","sortDirection","sortCompare","Snackbar","open","autoHideDuration","onClose","severity","theme","createMuiTheme","palette","primary","main","secondary","red","A400","background","default","ReactDOM","render","ThemeProvider","CssBaseline","document","querySelector"],"mappings":"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","file":"static/js/main.3af4ed1e.chunk.js","sourcesContent":["import React, {useMemo, useState} from 'react';\nimport Container from '@material-ui/core/Container';\nimport Typography from '@material-ui/core/Typography';\nimport Box from '@material-ui/core/Box';\nimport Link from '@material-ui/core/Link';\nimport Button from '@material-ui/core/Button';\nimport Cite from 'citation-js';\nimport MUIDataTable from 'mui-datatables';\nimport {Grid} from '@material-ui/core';\nimport sanitizeHtml from 'sanitize-html';\nimport Snackbar from '@material-ui/core/Snackbar';\nimport MuiAlert from '@material-ui/lab/Alert';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\n\nfunction Copyright() {\n    return (\n        <Typography variant=\"body2\" color=\"textSecondary\" align=\"center\">\n            {'Copyright Â© '}\n            <Link color=\"inherit\" href=\"https://material-ui.com/\">\n                Michael Milton\n            </Link>{' '}\n            {new Date().getFullYear()}\n            {'.'}\n        </Typography>\n    );\n}\n\n/**\n * Outputs CSL JSON from an arbitrary citation file\n * @returns {Promise<*>}\n */\nasync function parseFile(file) {\n    const contents = await file.text();\n    const example = new Cite(contents);\n    return example.format('data', {format: 'object'});\n}\n\nclass Author {\n    constructor(name) {\n        this.fullName = name;\n        this.authorships = [];\n        this.firstAuthorships = [];\n        this.lastAuthorships = [];\n    }\n}\n\n/**\n * Returns a sanitized string to use as the name of a work\n * @returns {*}\n */\nfunction workDisplayName(work){\n    return sanitizeHtml(work.title, {\n        allowedTags: [],\n        allowedAttributes: {}\n    });\n}\n\n/**\n * Takes a list of publication objects and returns a react element that visualises this\n * @param value\n */\nfunction renderWorkList(value){\n    return (\n            <>\n            { value.map(work => <Link href={work.URL}>{workDisplayName(work)} </Link>) }\n            </>\n        );\n}\n\nfunction sortByLength(order){\n    return function(a, b) {\n        return (a.data.length - b.data.length) * (order === 'asc' ? 1 : -1);\n    }\n}\n\n/**\n * Takes a list of publication objects and returns a react element that visualises the length of items\n * @param value\n */\nfunction renderCount(value){\n    return value.length.toString();\n}\n\n/**\n * Returns an ID used to key a dictionary, unique to a certain author\n * @param author\n */\nfunction authorId(author) {\n    const names = [];\n    if ('given' in author && author.given.length > 0) {\n        names.push(author.given.trim().split(' ')[0]);\n    }\n    if ('family' in author && author.family.length > 0) {\n        names.push(author.family.trim().split(' ')[0]);\n    }\n    return names.join('|');\n}\n\n/**\n * Converts the citation file into an array of author objects\n * @param citations\n * @returns {any[]}\n */\nfunction getAuthors(citations) {\n    const authors = new Map();\n    for (let work of citations) {\n        if (!Array.isArray(work.author)) {\n            continue;\n        }\n        work.author.forEach((author, i) => {\n            const authorLookup = authorId(author);\n            let authorObj;\n            if (!authors.has(authorLookup)) {\n                authorObj = new Author(author.given + ' ' + author.family);\n                authors.set(authorLookup, authorObj);\n            }\n            else {\n                authorObj = authors.get(authorLookup);\n            }\n\n            authorObj.authorships.push(work);\n            if (i === 0) {\n                authorObj.firstAuthorships.push(work);\n            }\n            if (i === work.author.length - 1) {\n                authorObj.lastAuthorships.push(work);\n            }\n        });\n    }\n\n    return Array.from(authors.values());\n}\n\nexport default function App() {\n    const [file, setFile] = useState();\n    const [error, setError] = useState(null);\n    const authors = useMemo(() => {\n        if (file) {\n            return getAuthors(file);\n        }\n    }, [file]);\n\n    return (\n        <Container maxWidth=\"md\">\n            <AppBar position=\"static\">\n                <Toolbar>\n                    <Box flexGrow={1}>\n                        <Typography variant=\"h2\">\n                            refviewers\n                        </Typography>\n                    </Box>\n                    <Button href=\"https://github.com/TMiguelT/refviewers\" color=\"inherit\">GitHub</Button>\n                </Toolbar>\n            </AppBar>\n            <Box my={4}>\n                <Grid container spacing={2} alignItems={'center'} direction={'column'}>\n                    <Grid item>\n                        <Typography variant=\"body1\" component=\"h1\" gutterBottom>\n                            <code>refviewers</code> is a simple browser utility for recommending reviewers for your manuscript, in\n                            case you are submitting a paper to a journal that requires this.\n                        </Typography>\n                        <Typography variant=\"body1\" component=\"h1\" gutterBottom>\n                            The general idea is that the authors in the papers that you have cited are more likely to \n                            be well-informed reviewers, and the more papers of theirs you have cited, the more\n                            relevant they will be. Thus, <code>refviewers</code> produces a table sorted by the number \n                            of times you have cited each.\n                        </Typography>\n                        <Typography variant=\"body1\" component=\"h1\" gutterBottom>\n                            To use, simply upload a RIS, BibTeX or CSL-JSON file generated by your citation manager.\n                        </Typography>\n                    </Grid>\n                    <Grid item>\n                        <Button\n                            variant=\"contained\"\n                            component=\"label\"\n                        >\n                            Upload File\n                            <input\n                                type=\"file\"\n                                style={{display: 'none'}}\n                                onChange={event => {\n                                    const fileType = event.currentTarget.files[0].type;\n                                    parseFile(event.currentTarget.files[0]).then(parsed => setFile(parsed)).catch(e => {\n                                        setError(`Invalid file type! You provided ${fileType}, which is not supported.`);\n                                    });\n                                }}\n                            />\n                        </Button>\n                    </Grid>\n                    <Grid item>\n                        {file &&\n                        <MUIDataTable\n                            title={'Authors'}\n                            data={authors}\n                            columns={[\n                                {\n                                    name: 'fullName',\n                                    label: 'Full Name',\n                                    options: {\n                                        sort: false,\n                                        customBodyRenderLite(dataIndex, rowIndex){\n                                            return <Link href={encodeURI(`https://scholar.google.com/scholar?q=author:\"${authors[dataIndex].fullName}\"`)}>{authors[dataIndex].fullName}</Link>\n                                        }\n                                    }\n                                },\n                                {\n                                    name: 'authorships',\n                                    label: 'All Authorships',\n                                    options: {\n                                        sort: false,\n                                        customBodyRender: renderWorkList\n                                    }\n                                },\n                                {\n                                    name: 'authorships',\n                                    label: 'Total Authorships',\n                                    options: {\n                                        sort: true,\n                                        sortDirection: 'desc',\n                                        customBodyRender: renderCount,\n                                        sortCompare: sortByLength\n                                    }\n                                },\n                                {\n                                    name: 'firstAuthorships',\n                                    label: 'First Authorships',\n                                    options: {\n                                        sort: false,\n                                        display: false,\n                                        customBodyRender: renderWorkList\n                                    }\n                                },\n                                {\n                                    name: 'firstAuthorships',\n                                    label: 'Total First Authorships',\n                                    options: {\n                                        sort: true,\n                                        customBodyRender: renderCount,\n                                        sortCompare: sortByLength\n                                    }\n                                },\n                                {\n                                    name: 'lastAuthorships',\n                                    label: 'Last Authorships',\n                                    options: {\n                                        sort: false,\n                                        display: false,\n                                        customBodyRender: renderWorkList\n                                    }\n                                },\n                                {\n                                    name: 'lastAuthorships',\n                                    label: 'Total Last Authorships',\n                                    options: {\n                                        sort: true,\n                                        customBodyRender: renderCount,\n                                        sortCompare: sortByLength\n                                    }\n                                },\n                            ]}\n                        />\n                        }\n                    </Grid>\n                    <Grid item>\n                        <Copyright/>\n                    </Grid>\n                </Grid>\n            </Box>\n            <Snackbar open={!!error} autoHideDuration={6000} onClose={() => setError(null)}>\n                <MuiAlert variant={'filled'} onClose={() => setError(null)} severity=\"error\">\n                    {error || ''}\n                </MuiAlert>\n            </Snackbar>\n        </Container>\n    );\n}\n","import { red } from '@material-ui/core/colors';\nimport { createMuiTheme } from '@material-ui/core/styles';\n\n// A custom theme for this app\nconst theme = createMuiTheme({\n  palette: {\n    primary: {\n      main: '#556cd6',\n    },\n    secondary: {\n      main: '#19857b',\n    },\n    error: {\n      main: red.A400,\n    },\n    background: {\n      default: '#fff',\n    },\n  },\n});\n\nexport default theme;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport { ThemeProvider } from '@material-ui/core/styles';\nimport App from './App';\nimport theme from './theme';\n\nReactDOM.render(\n  <ThemeProvider theme={theme}>\n    <CssBaseline />\n    <App />\n  </ThemeProvider>,\n  document.querySelector('#root'),\n);\n"],"sourceRoot":""}